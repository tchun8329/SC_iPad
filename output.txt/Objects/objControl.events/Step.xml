<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/*
surface_set_target(srfFOW);
draw_set_blend_mode(bm_subtract); 

for (i=0;i!=ds_list_size(selectedUnits);i+=1)
{
    targetid = ds_list_find_value(selectedUnits,i);
    
    draw_set_alpha(0.35);
    draw_set_color(c_black);
    draw_circle(targetid.x,targetid.y,128,0);
    draw_set_color(c_white);
    draw_circle(targetid.x,targetid.y,120,0);
}
draw_set_blend_mode(bm_normal);
surface_reset_target();
*/
/*
draw_set_blend_mode(bm_add);
surface_set_target(srfUnexploredFOW);
for (i=0; i!=ds_list_size(selectedUnits); i+=1)
{
    targetID = ds_list_find_value(selectedUnits,i);
    
    draw_circle_color(targetID.x,targetID.y,220,c_white,c_black,0); //add light
    draw_sprite(sprVision,-1,targetID.x,targetID.y);
}
surface_set_target(srfExploredFOW);
draw_clear_alpha(c_dkgray,1);
for (i=0;i!=ds_list_size(selectedUnits);i+=1)
{
    targetID = ds_list_find_value(selectedUnits,i);
    
    draw_circle_color(targetID.x,targetID.y,220,c_white,c_black,0); //add light
    draw_sprite(sprVision,-1,targetID.x,targetID.y);
}
*/
mouse_area_set(window_get_x()-1, window_get_y()-1, window_get_x()+window_get_width()+1, window_get_y()+window_get_height()+1);

draw_set_blend_mode(bm_add);
surface_set_target(srfUnexploredFOW);
with(baseUnit)
{
    //if(isMoving)
    //{
    //show_message(string(room_width/32) + " " + string(room_height/32));
    if(!global.exploredGrid[x/32,y/32])
    {
        draw_set_alpha(0.6);
        draw_circle_color(x,y,224,c_white,c_black,0); //add light
        draw_set_alpha(0.7);
        draw_circle_color(x,y,228,c_white,c_black,0);
        draw_set_alpha(0.8);
        draw_circle_color(x,y,232,c_white,c_black,0);
        draw_set_alpha(0.9);
        draw_circle_color(x,y,236,c_white,c_black,0);
        draw_set_alpha(1.0);
        draw_circle_color(x,y,240,c_white,c_black,0);
    }
    //}
    //else
    //{
    //    draw_circle_color(x,y,220,c_white,c_black,0);
    //}
    draw_sprite(sprVision,-1,x,y);
}
surface_set_target(srfExploredFOW);
draw_clear_alpha(c_dkgray,1);
with(baseUnit)
{
    draw_circle_color(x,y,220,c_white,c_black,0); //add light
    draw_sprite(sprVision,-1,x,y);
}
surface_set_target(srfCliffFOW);
with(baseUnit)
{
    if(height &gt;= 1 &amp;&amp; !global.exploredGrid[x/32,y/32])
    {
        draw_set_alpha(0.6);
        draw_circle_color(x,y,224,c_white,c_black,0); //add light
        draw_sprite(sprVision,-1,x,y);
    }
}

draw_set_blend_mode(bm_normal);     
surface_reset_target();                     //draw to screen
</argument>
      </arguments>
    </action>
  </actions>
</event>

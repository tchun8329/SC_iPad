<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="ALARM" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if(pathPos &gt;= 0)
{
    var pathEnd, travelTime, dist;
    pathEnd = path_get_number(myPath) - 1;
    dist = point_distance(x, y, gotoX, gotoY);
  
    if(pathPos != pathEnd)
    {
        if(floor(random(dist / 8)) == 0 || dist &lt; 15)
        {
            if(dist &lt; 150)
            {
                if(!collision_line(x, y, gotoX, gotoY, objWall, false, true))
                { 
                    // Set an alarm to recalculate a new path if the unit takes to long to reach the next position
                    pathPos += 1;
                    travelTime = point_distance(x, y, path_get_point_x(myPath, pathPos), path_get_point_y(myPath, pathPos)) / moveSpeed;
                    alarm[1] = travelTime + 120;
                }
            }
        }
    
        gotoX = path_get_point_x(myPath, pathPos);
        gotoY = path_get_point_y(myPath, pathPos);
    }
    else if(pathPos == pathEnd)
    {
        if(floor(random((dist + 40) / 8)) == 0) 
        {
            if(dist &lt; 300)
            {
                gotoX = x;
                gotoY = y;
                pathPos = -1;
                alarm[1] = 0;
                exit;
            }
        }
    }
    alarm[0] = max(20 / moveSpeed, 1);
    
    // fog of war
    global.exploredGrid[x/32,y/32] = true;
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
